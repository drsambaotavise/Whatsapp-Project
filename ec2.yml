<<<<<<< HEAD
# add AMI
# create keypair
# add security group
# add role
# add ebs volume to 100 GB
# reduce ebs volume to 80gb
# orlando is testing
# open port 22
# define parameters
# olasele is testing the below
# create a master node
# create 2 hosts node
# ssh into all servers
# create keypairs and copy public key to the host nodes
# Run sudo useradd Ansible on all node
# ssh into nodes from master usinf nodesprivate IPs
=======
---
Resources:
  # Create the VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Create public and private subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create a route table for each subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Associate each subnet with a route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Create a network ACL for each subnet
  PublicSubnetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicSubnetACL

  PrivateSubnetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateSubnetACL

  # Allow HTTP and HTTPS traffic in the public subnet ACL
  PublicSubnetACLPublicInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PublicSubnetACL
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
      PortRange:
        From: 80
        To: 80

  PublicSubnetACLPublicInboundHTTPSRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
>>>>>>> b8583a12790d88a0b4f4ba547b5201b1475e377e
